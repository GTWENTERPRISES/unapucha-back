# Generated by Django 5.1.1 on 2024-11-19 04:57

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Compra',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('numero_factura', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Formato de factura inválido', regex='^[A-Z0-9-]{5,20}$')], verbose_name='Número de Factura')),
                ('fecha', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Fecha de Compra')),
                ('total_base', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Total Base')),
                ('total_iva', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Total IVA')),
                ('total_con_iva', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Total con IVA')),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('RECIBIDO', 'Recibido'), ('CANCELADO', 'Cancelado')], db_index=True, default='PENDIENTE', max_length=20, verbose_name='Estado')),
                ('notas', models.TextField(blank=True, null=True, verbose_name='Notas de la Compra')),
            ],
            options={
                'verbose_name': 'Compra',
                'verbose_name_plural': 'Compras',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nombre', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Nombre de Categoría')),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('activa', models.BooleanField(default=True, verbose_name='Categoría Activa')),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Categoría',
                'verbose_name_plural': 'Categorías',
                'ordering': ['nombre'],
                'indexes': [models.Index(fields=['nombre'], name='inventario4_nombre_39b633_idx'), models.Index(fields=['slug'], name='inventario4_slug_81dad3_idx')],
            },
        ),
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nombre', models.CharField(db_index=True, max_length=100, verbose_name='Nombre del Producto')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('sku', models.CharField(db_index=True, max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='SKU debe contener solo letras mayúsculas y números, mínimo 6 caracteres', regex='^[A-Z0-9]{6,50}$')], verbose_name='Código SKU')),
                ('precio_base', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Precio Base')),
                ('stock', models.PositiveIntegerField(default=0, verbose_name='Cantidad en Stock')),
                ('stock_minimo', models.PositiveIntegerField(default=10, verbose_name='Stock Mínimo')),
                ('stock_maximo', models.PositiveIntegerField(default=100, verbose_name='Stock Máximo')),
                ('estado_stock', models.CharField(choices=[('EN_STOCK', 'En Stock'), ('BAJO_STOCK', 'Bajo Stock'), ('SIN_STOCK', 'Sin Stock')], db_index=True, max_length=20, verbose_name='Estado del Stock')),
                ('activo', models.BooleanField(default=True, verbose_name='Producto Activo')),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='productos/', verbose_name='Imagen del Producto')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='productos', to='inventario4.categoria', verbose_name='Categoría')),
            ],
            options={
                'verbose_name': 'Producto',
                'verbose_name_plural': 'Productos',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='DetalleCompra',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cantidad', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cantidad')),
                ('precio_unitario', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Precio Unitario')),
                ('subtotal', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Subtotal')),
                ('compra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='inventario4.compra', verbose_name='Compra')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='detalles_compra', to='inventario4.producto', verbose_name='Producto')),
            ],
            options={
                'verbose_name': 'Detalle de Compra',
                'verbose_name_plural': 'Detalles de Compras',
            },
        ),
        migrations.CreateModel(
            name='Proveedor',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nombre', models.CharField(db_index=True, max_length=100, verbose_name='Nombre del Proveedor')),
                ('contacto', models.CharField(max_length=100, verbose_name='Persona de Contacto')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo Electrónico')),
                ('telefono', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe estar en formato: '+999999999'", regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono')),
                ('ruc', models.CharField(db_index=True, max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message='El RUC debe contener exactamente 13 dígitos', regex='^\\d{13}$')], verbose_name='RUC')),
                ('direccion', models.TextField(verbose_name='Dirección')),
                ('ciudad', models.CharField(max_length=50, verbose_name='Ciudad')),
                ('provincia', models.CharField(max_length=50, verbose_name='Provincia')),
                ('activo', models.BooleanField(default=True, verbose_name='Activo')),
                ('notas', models.TextField(blank=True, null=True, verbose_name='Notas Adicionales')),
            ],
            options={
                'verbose_name': 'Proveedor',
                'verbose_name_plural': 'Proveedores',
                'ordering': ['nombre'],
                'indexes': [models.Index(fields=['nombre'], name='inventario4_nombre_5aa85d_idx'), models.Index(fields=['ruc'], name='inventario4_ruc_e98843_idx'), models.Index(fields=['email'], name='inventario4_email_f9c5d7_idx')],
            },
        ),
        migrations.AddField(
            model_name='compra',
            name='proveedor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='compras', to='inventario4.proveedor', verbose_name='Proveedor'),
        ),
        migrations.CreateModel(
            name='Venta',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('numero_factura', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Formato de factura inválido', regex='^[A-Z0-9-]{5,20}$')], verbose_name='Número de Factura')),
                ('fecha', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Fecha de Venta')),
                ('cliente', models.CharField(db_index=True, max_length=100, verbose_name='Nombre del Cliente')),
                ('cedula_ruc', models.CharField(db_index=True, max_length=13, validators=[django.core.validators.RegexValidator(message='Cédula/RUC debe contener entre 10 y 13 dígitos', regex='^\\d{10,13}$')], verbose_name='Cédula/RUC')),
                ('direccion', models.TextField(verbose_name='Dirección del Cliente')),
                ('telefono', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Formato de teléfono inválido', regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono del Cliente')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Correo del Cliente')),
                ('total_base', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Total Base')),
                ('total_iva', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Total IVA')),
                ('total_con_iva', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Total con IVA')),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('COMPLETADO', 'Completado'), ('ANULADO', 'Anulado')], db_index=True, default='PENDIENTE', max_length=20, verbose_name='Estado')),
                ('metodo_pago', models.CharField(choices=[('TARJETA', 'Tarjeta'), ('EFECTIVO', 'Efectivo'), ('TRANSFERENCIA', 'Transferencia')], db_index=True, max_length=20, verbose_name='Método de Pago')),
                ('notas', models.TextField(blank=True, null=True, verbose_name='Notas de la Venta')),
            ],
            options={
                'verbose_name': 'Venta',
                'verbose_name_plural': 'Ventas',
                'ordering': ['-fecha'],
                'indexes': [models.Index(fields=['numero_factura'], name='inventario4_numero__9ba0f6_idx'), models.Index(fields=['fecha'], name='inventario4_fecha_8fe48e_idx'), models.Index(fields=['estado'], name='inventario4_estado_92409b_idx'), models.Index(fields=['cliente'], name='inventario4_cliente_29eeb9_idx'), models.Index(fields=['cedula_ruc'], name='inventario4_cedula__57d161_idx'), models.Index(fields=['metodo_pago'], name='inventario4_metodo__3ead06_idx')],
            },
        ),
        migrations.CreateModel(
            name='DetalleVenta',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cantidad', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cantidad')),
                ('precio_unitario', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Precio Unitario')),
                ('descuento', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Descuento (%)')),
                ('subtotal', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Subtotal')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='detalles_venta', to='inventario4.producto', verbose_name='Producto')),
                ('venta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='inventario4.venta', verbose_name='Venta')),
            ],
            options={
                'verbose_name': 'Detalle de Venta',
                'verbose_name_plural': 'Detalles de Ventas',
            },
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['nombre'], name='inventario4_nombre_06af1f_idx'),
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['sku'], name='inventario4_sku_00b9df_idx'),
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['estado_stock'], name='inventario4_estado__f1ddf4_idx'),
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['categoria', 'estado_stock'], name='inventario4_categor_b0aa3c_idx'),
        ),
        migrations.AddConstraint(
            model_name='producto',
            constraint=models.CheckConstraint(condition=models.Q(('stock_minimo__lt', models.F('stock_maximo'))), name='check_stock_minimo_menor_maximo'),
        ),
        migrations.AddIndex(
            model_name='detallecompra',
            index=models.Index(fields=['compra', 'producto'], name='inventario4_compra__9fe2cc_idx'),
        ),
        migrations.AddIndex(
            model_name='detallecompra',
            index=models.Index(fields=['producto'], name='inventario4_product_d833e0_idx'),
        ),
        migrations.AddConstraint(
            model_name='detallecompra',
            constraint=models.CheckConstraint(condition=models.Q(('cantidad__gt', 0)), name='check_cantidad_compra_positiva'),
        ),
        migrations.AddIndex(
            model_name='compra',
            index=models.Index(fields=['numero_factura'], name='inventario4_numero__d91e87_idx'),
        ),
        migrations.AddIndex(
            model_name='compra',
            index=models.Index(fields=['fecha'], name='inventario4_fecha_f719f9_idx'),
        ),
        migrations.AddIndex(
            model_name='compra',
            index=models.Index(fields=['estado'], name='inventario4_estado_92c72d_idx'),
        ),
        migrations.AddIndex(
            model_name='compra',
            index=models.Index(fields=['proveedor', 'estado'], name='inventario4_proveed_bd5492_idx'),
        ),
        migrations.AddIndex(
            model_name='detalleventa',
            index=models.Index(fields=['venta', 'producto'], name='inventario4_venta_i_ce9d38_idx'),
        ),
        migrations.AddIndex(
            model_name='detalleventa',
            index=models.Index(fields=['producto'], name='inventario4_product_04bed7_idx'),
        ),
        migrations.AddConstraint(
            model_name='detalleventa',
            constraint=models.CheckConstraint(condition=models.Q(('cantidad__gt', 0)), name='check_cantidad_positiva'),
        ),
        migrations.AddConstraint(
            model_name='detalleventa',
            constraint=models.CheckConstraint(condition=models.Q(('descuento__gte', 0), ('descuento__lte', 100)), name='check_descuento_rango'),
        ),
    ]
